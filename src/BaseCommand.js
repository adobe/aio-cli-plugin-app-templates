/*
 * Copyright 2022 Adobe Inc. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

const { Command, Flags } = require('@oclif/core')
const inquirer = require('inquirer')
const aioLogger = require('@adobe/aio-lib-core-logging')('@adobe/aio-cli-plugin-app-templates', { provider: 'debug' })
const { getToken, context } = require('@adobe/aio-lib-ims')
const { CLI } = require('@adobe/aio-lib-ims/src/context')

class BaseCommand extends Command {
  // default error handler for commands
  async catch (error) {
    const { flags } = await this.parse(this.prototype)
    aioLogger.error(error) // debug log
    this.handleError(error, flags.verbose)
  }

  handleError (error, verbose) {
    const errorMessages = ['no such file or directory', 'find configuration']

    if (errorMessages.find(msg => error.message.includes(msg))) {
      const errorList = [
        'Not a valid application root folder.',
        'Please run \'aio templates\' commands from a folder generated by aio app init',
        verbose ? error.stack : error.message
      ]
      this.error(errorList.join('\n'))
    }
    this.error(error.message)
  }

  async init () {
    super.init()
    // setup a prompt that outputs to stderr
    this.prompt = inquirer.createPromptModule({ output: process.stderr })
  }

  async login () {
    await context.setCli({ 'cli.bare-output': true }, false) // set this globally
    aioLogger.debug('run login')
    this.accessToken = await getToken(CLI)
  }
}

BaseCommand.flags = {
  verbose: Flags.boolean({ char: 'v', description: 'Verbose output' })
}

BaseCommand.args = []

module.exports = BaseCommand
